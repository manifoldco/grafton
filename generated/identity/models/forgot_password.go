package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"

	manifold "github.com/manifoldco/go-manifold"
)

// ForgotPassword forgot password
// swagger:model ForgotPassword
type ForgotPassword struct {

	// email
	// Required: true
	Email manifold.Email `json:"email"`

	// public key
	// Required: true
	PublicKey *LoginPublicKey `json:"public_key"`

	// token
	// Required: true
	Token LimitedLifeTokenBase64 `json:"token"`
}

// Validate validates this forgot password
func (m *ForgotPassword) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForgotPassword) validateEmail(formats strfmt.Registry) error {

	if err := m.Email.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("email")
		}
		return err
	}

	return nil
}

func (m *ForgotPassword) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("public_key", "body", m.PublicKey); err != nil {
		return err
	}

	if m.PublicKey != nil {

		if err := m.PublicKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("public_key")
			}
			return err
		}
	}

	return nil
}

func (m *ForgotPassword) validateToken(formats strfmt.Registry) error {

	if err := m.Token.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("token")
		}
		return err
	}

	return nil
}
