package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"

	manifold "github.com/manifoldco/go-manifold"
)

// Team team
// swagger:model Team
type Team struct {

	// body
	// Required: true
	Body *TeamBody `json:"body"`

	// id
	// Required: true
	ID manifold.ID `json:"id"`

	// type
	// Required: true
	Type *string `json:"type"`

	// version
	// Required: true
	Version *int64 `json:"version"`
}

// Validate validates this team
func (m *Team) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Team) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	if m.Body != nil {

		if err := m.Body.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

func (m *Team) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

var teamTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["team"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		teamTypeTypePropEnum = append(teamTypeTypePropEnum, v)
	}
}

const (
	// TeamTypeTeam captures enum value "team"
	TeamTypeTeam string = "team"
)

// prop value enum
func (m *Team) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, teamTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Team) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var teamTypeVersionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		teamTypeVersionPropEnum = append(teamTypeVersionPropEnum, v)
	}
}

// prop value enum
func (m *Team) validateVersionEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, teamTypeVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Team) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	// value enum
	if err := m.validateVersionEnum("version", "body", *m.Version); err != nil {
		return err
	}

	return nil
}

// TeamBody team body
// swagger:model TeamBody
type TeamBody struct {

	// label
	// Required: true
	Label manifold.Label `json:"label"`

	// name
	// Required: true
	Name manifold.Name `json:"name"`
}

// Validate validates this team body
func (m *TeamBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamBody) validateLabel(formats strfmt.Registry) error {

	if err := m.Label.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "label")
		}
		return err
	}

	return nil
}

func (m *TeamBody) validateName(formats strfmt.Registry) error {

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "name")
		}
		return err
	}

	return nil
}
