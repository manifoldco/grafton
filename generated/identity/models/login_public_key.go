package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// LoginPublicKey login public key
// swagger:model LoginPublicKey
type LoginPublicKey struct {

	// alg
	// Required: true
	Alg *string `json:"alg"`

	// salt
	// Required: true
	// Max Length: 22
	// Min Length: 22
	// Pattern: ^[a-zA-Z0-9_-]*$
	Salt *string `json:"salt"`

	// value
	// Required: true
	// Max Length: 43
	// Min Length: 43
	// Pattern: ^[a-zA-Z0-9_-]*$
	Value *string `json:"value"`
}

// Validate validates this login public key
func (m *LoginPublicKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlg(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSalt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var loginPublicKeyTypeAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["eddsa"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loginPublicKeyTypeAlgPropEnum = append(loginPublicKeyTypeAlgPropEnum, v)
	}
}

const (
	// LoginPublicKeyAlgEddsa captures enum value "eddsa"
	LoginPublicKeyAlgEddsa string = "eddsa"
)

// prop value enum
func (m *LoginPublicKey) validateAlgEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, loginPublicKeyTypeAlgPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LoginPublicKey) validateAlg(formats strfmt.Registry) error {

	if err := validate.Required("alg", "body", m.Alg); err != nil {
		return err
	}

	// value enum
	if err := m.validateAlgEnum("alg", "body", *m.Alg); err != nil {
		return err
	}

	return nil
}

func (m *LoginPublicKey) validateSalt(formats strfmt.Registry) error {

	if err := validate.Required("salt", "body", m.Salt); err != nil {
		return err
	}

	if err := validate.MinLength("salt", "body", string(*m.Salt), 22); err != nil {
		return err
	}

	if err := validate.MaxLength("salt", "body", string(*m.Salt), 22); err != nil {
		return err
	}

	if err := validate.Pattern("salt", "body", string(*m.Salt), `^[a-zA-Z0-9_-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoginPublicKey) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if err := validate.MinLength("value", "body", string(*m.Value), 43); err != nil {
		return err
	}

	if err := validate.MaxLength("value", "body", string(*m.Value), 43); err != nil {
		return err
	}

	if err := validate.Pattern("value", "body", string(*m.Value), `^[a-zA-Z0-9_-]*$`); err != nil {
		return err
	}

	return nil
}
