package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"

	manifold "github.com/manifoldco/go-manifold"
)

// MemberProfile member profile
// swagger:model MemberProfile
type MemberProfile struct {

	// email
	// Required: true
	Email manifold.Email `json:"email"`

	// membership id
	// Required: true
	MembershipID manifold.ID `json:"membership_id"`

	// name
	// Required: true
	Name UserDisplayName `json:"name"`

	// role
	// Required: true
	Role RoleLabel `json:"role"`

	// user id
	// Required: true
	UserID manifold.ID `json:"user_id"`
}

// Validate validates this member profile
func (m *MemberProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMembershipID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemberProfile) validateEmail(formats strfmt.Registry) error {

	if err := m.Email.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("email")
		}
		return err
	}

	return nil
}

func (m *MemberProfile) validateMembershipID(formats strfmt.Registry) error {

	if err := m.MembershipID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("membership_id")
		}
		return err
	}

	return nil
}

func (m *MemberProfile) validateName(formats strfmt.Registry) error {

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *MemberProfile) validateRole(formats strfmt.Registry) error {

	if err := m.Role.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("role")
		}
		return err
	}

	return nil
}

func (m *MemberProfile) validateUserID(formats strfmt.Registry) error {

	if err := m.UserID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("user_id")
		}
		return err
	}

	return nil
}
