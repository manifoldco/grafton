package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"

	manifold "github.com/manifoldco/go-manifold"
)

// LoginToken login token
// swagger:model LoginToken
type LoginToken struct {

	// body
	// Required: true
	Body *LoginTokenBody `json:"body"`

	// id
	// Required: true
	ID manifold.ID `json:"id"`

	// type
	// Required: true
	Type *string `json:"type"`

	// version
	// Required: true
	Version *int64 `json:"version"`
}

// Validate validates this login token
func (m *LoginToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoginToken) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	if m.Body != nil {

		if err := m.Body.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

func (m *LoginToken) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

var loginTokenTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["login_token"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loginTokenTypeTypePropEnum = append(loginTokenTypeTypePropEnum, v)
	}
}

const (
	// LoginTokenTypeLoginToken captures enum value "login_token"
	LoginTokenTypeLoginToken string = "login_token"
)

// prop value enum
func (m *LoginToken) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, loginTokenTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LoginToken) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var loginTokenTypeVersionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loginTokenTypeVersionPropEnum = append(loginTokenTypeVersionPropEnum, v)
	}
}

// prop value enum
func (m *LoginToken) validateVersionEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, loginTokenTypeVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LoginToken) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	// value enum
	if err := m.validateVersionEnum("version", "body", *m.Version); err != nil {
		return err
	}

	return nil
}

// LoginTokenBody login token body
// swagger:model LoginTokenBody
type LoginTokenBody struct {

	// mechanism
	// Required: true
	Mechanism string `json:"mechanism"`

	// token
	// Required: true
	// Max Length: 295
	Token *string `json:"token"`

	// user id
	// Required: true
	UserID manifold.ID `json:"user_id"`
}

// Validate validates this login token body
func (m *LoginTokenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMechanism(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var loginTokenBodyTypeMechanismPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["eddsa"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loginTokenBodyTypeMechanismPropEnum = append(loginTokenBodyTypeMechanismPropEnum, v)
	}
}

const (
	// LoginTokenBodyMechanismEddsa captures enum value "eddsa"
	LoginTokenBodyMechanismEddsa string = "eddsa"
)

// prop value enum
func (m *LoginTokenBody) validateMechanismEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, loginTokenBodyTypeMechanismPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LoginTokenBody) validateMechanism(formats strfmt.Registry) error {

	if err := validate.RequiredString("body"+"."+"mechanism", "body", string(m.Mechanism)); err != nil {
		return err
	}

	// value enum
	if err := m.validateMechanismEnum("body"+"."+"mechanism", "body", m.Mechanism); err != nil {
		return err
	}

	return nil
}

func (m *LoginTokenBody) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"token", "body", m.Token); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"token", "body", string(*m.Token), 295); err != nil {
		return err
	}

	return nil
}

func (m *LoginTokenBody) validateUserID(formats strfmt.Registry) error {

	if err := m.UserID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "user_id")
		}
		return err
	}

	return nil
}
