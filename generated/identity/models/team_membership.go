package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"

	manifold "github.com/manifoldco/go-manifold"
)

// TeamMembership team membership
// swagger:model TeamMembership
type TeamMembership struct {

	// body
	// Required: true
	Body *TeamMembershipBody `json:"body"`

	// id
	// Required: true
	ID manifold.ID `json:"id"`

	// type
	// Required: true
	Type *string `json:"type"`

	// version
	// Required: true
	Version *int64 `json:"version"`
}

// Validate validates this team membership
func (m *TeamMembership) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamMembership) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	if m.Body != nil {

		if err := m.Body.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

func (m *TeamMembership) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

var teamMembershipTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["team"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		teamMembershipTypeTypePropEnum = append(teamMembershipTypeTypePropEnum, v)
	}
}

const (
	// TeamMembershipTypeTeam captures enum value "team"
	TeamMembershipTypeTeam string = "team"
)

// prop value enum
func (m *TeamMembership) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, teamMembershipTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TeamMembership) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var teamMembershipTypeVersionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		teamMembershipTypeVersionPropEnum = append(teamMembershipTypeVersionPropEnum, v)
	}
}

// prop value enum
func (m *TeamMembership) validateVersionEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, teamMembershipTypeVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TeamMembership) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	// value enum
	if err := m.validateVersionEnum("version", "body", *m.Version); err != nil {
		return err
	}

	return nil
}

// TeamMembershipBody team membership body
// swagger:model TeamMembershipBody
type TeamMembershipBody struct {

	// role
	// Required: true
	Role RoleLabel `json:"role"`

	// team id
	// Required: true
	TeamID manifold.ID `json:"team_id"`

	// user id
	// Required: true
	UserID manifold.ID `json:"user_id"`
}

// Validate validates this team membership body
func (m *TeamMembershipBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeamID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamMembershipBody) validateRole(formats strfmt.Registry) error {

	if err := m.Role.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "role")
		}
		return err
	}

	return nil
}

func (m *TeamMembershipBody) validateTeamID(formats strfmt.Registry) error {

	if err := m.TeamID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "team_id")
		}
		return err
	}

	return nil
}

func (m *TeamMembershipBody) validateUserID(formats strfmt.Registry) error {

	if err := m.UserID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "user_id")
		}
		return err
	}

	return nil
}
