package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	manifold "github.com/manifoldco/go-manifold"
)

// User user
// swagger:model User
type User struct {

	// body
	// Required: true
	Body *UserBody `json:"body"`

	// id
	// Required: true
	ID manifold.ID `json:"id"`

	// type
	// Required: true
	Type *string `json:"type"`

	// version
	// Required: true
	Version *int64 `json:"version"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	if m.Body != nil {

		if err := m.Body.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

var userTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeTypePropEnum = append(userTypeTypePropEnum, v)
	}
}

const (
	// UserTypeUser captures enum value "user"
	UserTypeUser string = "user"
)

// prop value enum
func (m *User) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *User) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var userTypeVersionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeVersionPropEnum = append(userTypeVersionPropEnum, v)
	}
}

// prop value enum
func (m *User) validateVersionEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, userTypeVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *User) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	// value enum
	if err := m.validateVersionEnum("version", "body", *m.Version); err != nil {
		return err
	}

	return nil
}

// UserBody user body
// swagger:model UserBody
type UserBody struct {

	// email
	// Required: true
	Email manifold.Email `json:"email"`

	// name
	// Required: true
	Name UserDisplayName `json:"name"`

	// public key
	// Required: true
	PublicKey *LoginPublicKey `json:"public_key"`

	// state
	// Required: true
	State *string `json:"state"`

	// verification code
	// Max Length: 16
	// Pattern: ^[0-9abcdefghjkmnpqrtuvwxyz]{16}$
	VerificationCode string `json:"verification_code,omitempty"`
}

// Validate validates this user body
func (m *UserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVerificationCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserBody) validateEmail(formats strfmt.Registry) error {

	if err := m.Email.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "email")
		}
		return err
	}

	return nil
}

func (m *UserBody) validateName(formats strfmt.Registry) error {

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "name")
		}
		return err
	}

	return nil
}

func (m *UserBody) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"public_key", "body", m.PublicKey); err != nil {
		return err
	}

	if m.PublicKey != nil {

		if err := m.PublicKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "public_key")
			}
			return err
		}
	}

	return nil
}

var userBodyTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unverified","verified"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userBodyTypeStatePropEnum = append(userBodyTypeStatePropEnum, v)
	}
}

const (
	// UserBodyStateUnverified captures enum value "unverified"
	UserBodyStateUnverified string = "unverified"
	// UserBodyStateVerified captures enum value "verified"
	UserBodyStateVerified string = "verified"
)

// prop value enum
func (m *UserBody) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userBodyTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserBody) validateState(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("body"+"."+"state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *UserBody) validateVerificationCode(formats strfmt.Registry) error {

	if swag.IsZero(m.VerificationCode) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"verification_code", "body", string(m.VerificationCode), 16); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"verification_code", "body", string(m.VerificationCode), `^[0-9abcdefghjkmnpqrtuvwxyz]{16}$`); err != nil {
		return err
	}

	return nil
}
