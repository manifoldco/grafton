package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	manifold "github.com/manifoldco/go-manifold"
)

// AnalyticsEvent analytics event
// swagger:model AnalyticsEvent
type AnalyticsEvent struct {

	// event name
	// Required: true
	EventName *string `json:"event_name"`

	// properties
	Properties *AnalyticsEventProperties `json:"properties,omitempty"`

	// user id
	// Required: true
	UserID manifold.ID `json:"user_id"`
}

// Validate validates this analytics event
func (m *AnalyticsEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyticsEvent) validateEventName(formats strfmt.Registry) error {

	if err := validate.Required("event_name", "body", m.EventName); err != nil {
		return err
	}

	return nil
}

func (m *AnalyticsEvent) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {

		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *AnalyticsEvent) validateUserID(formats strfmt.Registry) error {

	if err := m.UserID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("user_id")
		}
		return err
	}

	return nil
}

// AnalyticsEventProperties analytics event properties
// swagger:model AnalyticsEventProperties
type AnalyticsEventProperties struct {

	// platform
	Platform string `json:"platform,omitempty"`

	// analytics event properties additional properties
	AnalyticsEventPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *AnalyticsEventProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// platform
		Platform string `json:"platform,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv AnalyticsEventProperties

	rcv.Platform = stage1.Platform

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "platform")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.AnalyticsEventPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m AnalyticsEventProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// platform
		Platform string `json:"platform,omitempty"`
	}

	stage1.Platform = m.Platform

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.AnalyticsEventPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.AnalyticsEventPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this analytics event properties
func (m *AnalyticsEventProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if swag.IsZero(m.AnalyticsEventPropertiesAdditionalProperties) { // not required
		return nil
	}

	if err := m.validatePlatform(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var analyticsEventPropertiesTypePlatformPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cli"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analyticsEventPropertiesTypePlatformPropEnum = append(analyticsEventPropertiesTypePlatformPropEnum, v)
	}
}

const (
	// AnalyticsEventPropertiesPlatformCli captures enum value "cli"
	AnalyticsEventPropertiesPlatformCli string = "cli"
)

// prop value enum
func (m *AnalyticsEventProperties) validatePlatformEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, analyticsEventPropertiesTypePlatformPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AnalyticsEventProperties) validatePlatform(formats strfmt.Registry) error {

	if swag.IsZero(m.Platform) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlatformEnum("properties"+"."+"platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}
