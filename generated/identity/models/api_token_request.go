package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	manifold "github.com/manifoldco/go-manifold"
)

// APITokenRequest API token request
// swagger:model APITokenRequest
type APITokenRequest struct {

	// description
	// Required: true
	// Max Length: 1000
	// Min Length: 1
	Description *string `json:"description"`

	// role
	// Required: true
	Role RoleLabel `json:"role"`

	// team id
	TeamID *manifold.ID `json:"team_id,omitempty"`

	// user id
	UserID *manifold.ID `json:"user_id,omitempty"`
}

// Validate validates this API token request
func (m *APITokenRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeamID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APITokenRequest) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *APITokenRequest) validateRole(formats strfmt.Registry) error {

	if err := m.Role.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("role")
		}
		return err
	}

	return nil
}

func (m *APITokenRequest) validateTeamID(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamID) { // not required
		return nil
	}

	if m.TeamID != nil {

		if err := m.TeamID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team_id")
			}
			return err
		}
	}

	return nil
}

func (m *APITokenRequest) validateUserID(formats strfmt.Registry) error {

	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if m.UserID != nil {

		if err := m.UserID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_id")
			}
			return err
		}
	}

	return nil
}
