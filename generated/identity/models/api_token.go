package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	manifold "github.com/manifoldco/go-manifold"
)

// APIToken API token
// swagger:model APIToken
type APIToken struct {

	// body
	Body *APITokenBody `json:"body,omitempty"`

	// id
	// Required: true
	ID manifold.ID `json:"id"`

	// type
	// Required: true
	Type *string `json:"type"`

	// version
	// Required: true
	Version *int64 `json:"version"`
}

// Validate validates this API token
func (m *APIToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIToken) validateBody(formats strfmt.Registry) error {

	if swag.IsZero(m.Body) { // not required
		return nil
	}

	if m.Body != nil {

		if err := m.Body.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

func (m *APIToken) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

var apiTokenTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["api_token"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiTokenTypeTypePropEnum = append(apiTokenTypeTypePropEnum, v)
	}
}

const (
	// APITokenTypeAPIToken captures enum value "api_token"
	APITokenTypeAPIToken string = "api_token"
)

// prop value enum
func (m *APIToken) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, apiTokenTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *APIToken) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var apiTokenTypeVersionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiTokenTypeVersionPropEnum = append(apiTokenTypeVersionPropEnum, v)
	}
}

// prop value enum
func (m *APIToken) validateVersionEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, apiTokenTypeVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *APIToken) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	// value enum
	if err := m.validateVersionEnum("version", "body", *m.Version); err != nil {
		return err
	}

	return nil
}

// APITokenBody API token body
// swagger:model APITokenBody
type APITokenBody struct {

	// description
	// Required: true
	// Max Length: 1000
	// Min Length: 1
	Description *string `json:"description"`

	// first four
	// Required: true
	FirstFour *string `json:"first_four"`

	// last four
	// Required: true
	LastFour *string `json:"last_four"`

	// role
	// Required: true
	Role RoleLabel `json:"role"`

	// team id
	// Required: true
	TeamID *manifold.ID `json:"team_id"`

	// token
	// Max Length: 60
	Token string `json:"token,omitempty"`

	// user id
	// Required: true
	UserID *manifold.ID `json:"user_id"`
}

// Validate validates this API token body
func (m *APITokenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFirstFour(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastFour(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeamID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APITokenBody) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"description", "body", string(*m.Description), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"description", "body", string(*m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *APITokenBody) validateFirstFour(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"first_four", "body", m.FirstFour); err != nil {
		return err
	}

	return nil
}

func (m *APITokenBody) validateLastFour(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"last_four", "body", m.LastFour); err != nil {
		return err
	}

	return nil
}

func (m *APITokenBody) validateRole(formats strfmt.Registry) error {

	if err := m.Role.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "role")
		}
		return err
	}

	return nil
}

func (m *APITokenBody) validateTeamID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"team_id", "body", m.TeamID); err != nil {
		return err
	}

	if m.TeamID != nil {

		if err := m.TeamID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "team_id")
			}
			return err
		}
	}

	return nil
}

func (m *APITokenBody) validateToken(formats strfmt.Registry) error {

	if swag.IsZero(m.Token) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"token", "body", string(m.Token), 60); err != nil {
		return err
	}

	return nil
}

func (m *APITokenBody) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"user_id", "body", m.UserID); err != nil {
		return err
	}

	if m.UserID != nil {

		if err := m.UserID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "user_id")
			}
			return err
		}
	}

	return nil
}
