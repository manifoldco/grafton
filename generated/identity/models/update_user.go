package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	manifold "github.com/manifoldco/go-manifold"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateUser update user
// swagger:model UpdateUser
type UpdateUser struct {

	// body
	Body *UpdateUserBody `json:"body,omitempty"`
}

// Validate validates this update user
func (m *UpdateUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateUser) validateBody(formats strfmt.Registry) error {

	if swag.IsZero(m.Body) { // not required
		return nil
	}

	if m.Body != nil {

		if err := m.Body.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

// UpdateUserBody update user body
// swagger:model UpdateUserBody
type UpdateUserBody struct {

	// auth token sig
	// Max Length: 86
	// Min Length: 86
	// Pattern: ^[a-zA-Z0-9_-]*$
	AuthTokenSig string `json:"auth_token_sig,omitempty"`

	// email
	Email manifold.Email `json:"email,omitempty"`

	// name
	Name UserDisplayName `json:"name,omitempty"`

	// public key
	PublicKey *LoginPublicKey `json:"public_key,omitempty"`
}

// Validate validates this update user body
func (m *UpdateUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthTokenSig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateUserBody) validateAuthTokenSig(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthTokenSig) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"auth_token_sig", "body", string(m.AuthTokenSig), 86); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"auth_token_sig", "body", string(m.AuthTokenSig), 86); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"auth_token_sig", "body", string(m.AuthTokenSig), `^[a-zA-Z0-9_-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdateUserBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "name")
		}
		return err
	}

	return nil
}

func (m *UpdateUserBody) validatePublicKey(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicKey) { // not required
		return nil
	}

	if m.PublicKey != nil {

		if err := m.PublicKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "public_key")
			}
			return err
		}
	}

	return nil
}
