package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	manifold "github.com/manifoldco/go-manifold"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateInvite create invite
// swagger:model CreateInvite
type CreateInvite struct {

	// body
	// Required: true
	Body *CreateInviteBody `json:"body"`
}

// Validate validates this create invite
func (m *CreateInvite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateInvite) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	if m.Body != nil {

		if err := m.Body.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

// CreateInviteBody create invite body
// swagger:model CreateInviteBody
type CreateInviteBody struct {

	// email
	// Required: true
	Email manifold.Email `json:"email"`

	// name
	// Required: true
	Name UserDisplayName `json:"name"`

	// role
	Role RoleLabel `json:"role,omitempty"`

	// team id
	// Required: true
	TeamID manifold.ID `json:"team_id"`
}

// Validate validates this create invite body
func (m *CreateInviteBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeamID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateInviteBody) validateEmail(formats strfmt.Registry) error {

	if err := m.Email.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "email")
		}
		return err
	}

	return nil
}

func (m *CreateInviteBody) validateName(formats strfmt.Registry) error {

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "name")
		}
		return err
	}

	return nil
}

func (m *CreateInviteBody) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if err := m.Role.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "role")
		}
		return err
	}

	return nil
}

func (m *CreateInviteBody) validateTeamID(formats strfmt.Registry) error {

	if err := m.TeamID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "team_id")
		}
		return err
	}

	return nil
}
