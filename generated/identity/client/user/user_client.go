package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetSelf retrieves the underlying user represented by a token
*/
func (a *Client) GetSelf(params *GetSelfParams, authInfo runtime.ClientAuthInfoWriter) (*GetSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSelfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSelf",
		Method:             "GET",
		PathPattern:        "/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSelfOK), nil

}

/*
PatchUsersID updates user profile
*/
func (a *Client) PatchUsersID(params *PatchUsersIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchUsersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchUsersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchUsersID",
		Method:             "PATCH",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUsersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUsersIDOK), nil

}

/*
PostAnalytics ans endpoint used by the cli to push analytics into segment
*/
func (a *Client) PostAnalytics(params *PostAnalyticsParams) (*PostAnalyticsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAnalyticsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAnalytics",
		Method:             "POST",
		PathPattern:        "/analytics/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsNoContent), nil

}

/*
PostUsers creates a new user
*/
func (a *Client) PostUsers(params *PostUsersParams) (*PostUsersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsers",
		Method:             "POST",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersCreated), nil

}

/*
PostUsersForgotPassword resets password with an emailed forgot password token
*/
func (a *Client) PostUsersForgotPassword(params *PostUsersForgotPasswordParams) (*PostUsersForgotPasswordNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersForgotPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsersForgotPassword",
		Method:             "POST",
		PathPattern:        "/users/forgot-password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersForgotPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersForgotPasswordNoContent), nil

}

/*
PostUsersForgotPasswordToken users has forgotten password send a reset token
*/
func (a *Client) PostUsersForgotPasswordToken(params *PostUsersForgotPasswordTokenParams) (*PostUsersForgotPasswordTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersForgotPasswordTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsersForgotPasswordToken",
		Method:             "POST",
		PathPattern:        "/users/forgot-password/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersForgotPasswordTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersForgotPasswordTokenNoContent), nil

}

/*
PostUsersVerify verifies email address
*/
func (a *Client) PostUsersVerify(params *PostUsersVerifyParams, authInfo runtime.ClientAuthInfoWriter) (*PostUsersVerifyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersVerifyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsersVerify",
		Method:             "POST",
		PathPattern:        "/users/verify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersVerifyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersVerifyNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
