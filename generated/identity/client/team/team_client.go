package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new team API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for team API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteMembershipsID removes a member from a team
*/
func (a *Client) DeleteMembershipsID(params *DeleteMembershipsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMembershipsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMembershipsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMembershipsID",
		Method:             "DELETE",
		PathPattern:        "/memberships/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMembershipsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMembershipsIDNoContent), nil

}

/*
GetMemberships lists memberships for the user
*/
func (a *Client) GetMemberships(params *GetMembershipsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMembershipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMembershipsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMemberships",
		Method:             "GET",
		PathPattern:        "/memberships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMembershipsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMembershipsOK), nil

}

/*
GetTeams lists teams for the current authenticated user
*/
func (a *Client) GetTeams(params *GetTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeams",
		Method:             "GET",
		PathPattern:        "/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTeamsOK), nil

}

/*
GetTeamsID gets a single team s profile
*/
func (a *Client) GetTeamsID(params *GetTeamsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamsID",
		Method:             "GET",
		PathPattern:        "/teams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTeamsIDOK), nil

}

/*
GetTeamsIDMembers gets team members by team id
*/
func (a *Client) GetTeamsIDMembers(params *GetTeamsIDMembersParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsIDMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsIDMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamsIDMembers",
		Method:             "GET",
		PathPattern:        "/teams/{id}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsIDMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTeamsIDMembersOK), nil

}

/*
PatchMembershipsID changes a user s role on a team
*/
func (a *Client) PatchMembershipsID(params *PatchMembershipsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchMembershipsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchMembershipsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchMembershipsID",
		Method:             "PATCH",
		PathPattern:        "/memberships/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchMembershipsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchMembershipsIDOK), nil

}

/*
PatchTeamsID updates team profile
*/
func (a *Client) PatchTeamsID(params *PatchTeamsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchTeamsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTeamsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchTeamsID",
		Method:             "PATCH",
		PathPattern:        "/teams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchTeamsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchTeamsIDOK), nil

}

/*
PostTeams creates a new team
*/
func (a *Client) PostTeams(params *PostTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*PostTeamsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTeams",
		Method:             "POST",
		PathPattern:        "/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTeamsCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
