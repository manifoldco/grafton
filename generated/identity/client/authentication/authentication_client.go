package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new authentication API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for authentication API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTokensToken revokes an auth token for log out
*/
func (a *Client) DeleteTokensToken(params *DeleteTokensTokenParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTokensTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTokensTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTokensToken",
		Method:             "DELETE",
		PathPattern:        "/tokens/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTokensTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTokensTokenNoContent), nil

}

/*
GetTokens lists API tokens
*/
func (a *Client) GetTokens(params *GetTokensParams, authInfo runtime.ClientAuthInfoWriter) (*GetTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTokens",
		Method:             "GET",
		PathPattern:        "/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTokensOK), nil

}

/*
PostTokens creates a new api token
*/
func (a *Client) PostTokens(params *PostTokensParams, authInfo runtime.ClientAuthInfoWriter) (*PostTokensCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTokens",
		Method:             "POST",
		PathPattern:        "/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTokensCreated), nil

}

/*
PostTokensAuth exchanges a login token for a general use auth token
*/
func (a *Client) PostTokensAuth(params *PostTokensAuthParams, authInfo runtime.ClientAuthInfoWriter) (*PostTokensAuthCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTokensAuthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTokensAuth",
		Method:             "POST",
		PathPattern:        "/tokens/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTokensAuthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTokensAuthCreated), nil

}

/*
PostTokensLogin creates a new login token
*/
func (a *Client) PostTokensLogin(params *PostTokensLoginParams) (*PostTokensLoginCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTokensLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTokensLogin",
		Method:             "POST",
		PathPattern:        "/tokens/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTokensLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTokensLoginCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
