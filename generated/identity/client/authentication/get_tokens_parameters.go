package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTokensParams creates a new GetTokensParams object
// with the default values initialized.
func NewGetTokensParams() *GetTokensParams {
	var ()
	return &GetTokensParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTokensParamsWithTimeout creates a new GetTokensParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTokensParamsWithTimeout(timeout time.Duration) *GetTokensParams {
	var ()
	return &GetTokensParams{

		timeout: timeout,
	}
}

// NewGetTokensParamsWithContext creates a new GetTokensParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTokensParamsWithContext(ctx context.Context) *GetTokensParams {
	var ()
	return &GetTokensParams{

		Context: ctx,
	}
}

// NewGetTokensParamsWithHTTPClient creates a new GetTokensParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTokensParamsWithHTTPClient(client *http.Client) *GetTokensParams {
	var ()
	return &GetTokensParams{
		HTTPClient: client,
	}
}

/*GetTokensParams contains all the parameters to send to the API endpoint
for the get tokens operation typically these are written to a http.Request
*/
type GetTokensParams struct {

	/*Me
	  Only list tokens with the user as the owner

	*/
	Me *bool
	/*TeamID
	  ID of the Team to filter tokens by, stored as a
	base32 encoded 18 byte identifier.


	*/
	TeamID *string
	/*Type
	  Only list tokens which match this type

	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get tokens params
func (o *GetTokensParams) WithTimeout(timeout time.Duration) *GetTokensParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get tokens params
func (o *GetTokensParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get tokens params
func (o *GetTokensParams) WithContext(ctx context.Context) *GetTokensParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get tokens params
func (o *GetTokensParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get tokens params
func (o *GetTokensParams) WithHTTPClient(client *http.Client) *GetTokensParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get tokens params
func (o *GetTokensParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMe adds the me to the get tokens params
func (o *GetTokensParams) WithMe(me *bool) *GetTokensParams {
	o.SetMe(me)
	return o
}

// SetMe adds the me to the get tokens params
func (o *GetTokensParams) SetMe(me *bool) {
	o.Me = me
}

// WithTeamID adds the teamID to the get tokens params
func (o *GetTokensParams) WithTeamID(teamID *string) *GetTokensParams {
	o.SetTeamID(teamID)
	return o
}

// SetTeamID adds the teamId to the get tokens params
func (o *GetTokensParams) SetTeamID(teamID *string) {
	o.TeamID = teamID
}

// WithType adds the typeVar to the get tokens params
func (o *GetTokensParams) WithType(typeVar string) *GetTokensParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get tokens params
func (o *GetTokensParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetTokensParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Me != nil {

		// query param me
		var qrMe bool
		if o.Me != nil {
			qrMe = *o.Me
		}
		qMe := swag.FormatBool(qrMe)
		if qMe != "" {
			if err := r.SetQueryParam("me", qMe); err != nil {
				return err
			}
		}

	}

	if o.TeamID != nil {

		// query param team_id
		var qrTeamID string
		if o.TeamID != nil {
			qrTeamID = *o.TeamID
		}
		qTeamID := qrTeamID
		if qTeamID != "" {
			if err := r.SetQueryParam("team_id", qTeamID); err != nil {
				return err
			}
		}

	}

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {
		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
