package invite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new invite API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for invite API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteInvitesID revokes an existing invite
*/
func (a *Client) DeleteInvitesID(params *DeleteInvitesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInvitesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInvitesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteInvitesID",
		Method:             "DELETE",
		PathPattern:        "/invites/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInvitesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInvitesIDNoContent), nil

}

/*
GetInvites lists of invites for the user
*/
func (a *Client) GetInvites(params *GetInvitesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInvitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvitesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInvites",
		Method:             "GET",
		PathPattern:        "/invites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInvitesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInvitesOK), nil

}

/*
GetInvitesToken retrieves an invite s details by token
*/
func (a *Client) GetInvitesToken(params *GetInvitesTokenParams) (*GetInvitesTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvitesTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInvitesToken",
		Method:             "GET",
		PathPattern:        "/invites/{token}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInvitesTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInvitesTokenOK), nil

}

/*
PostInvites creates a new invite
*/
func (a *Client) PostInvites(params *PostInvitesParams, authInfo runtime.ClientAuthInfoWriter) (*PostInvitesOK, *PostInvitesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInvitesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostInvites",
		Method:             "POST",
		PathPattern:        "/invites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInvitesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostInvitesOK:
		return value, nil, nil
	case *PostInvitesNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostInvitesAccept accepts an invite
*/
func (a *Client) PostInvitesAccept(params *PostInvitesAcceptParams, authInfo runtime.ClientAuthInfoWriter) (*PostInvitesAcceptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInvitesAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostInvitesAccept",
		Method:             "POST",
		PathPattern:        "/invites/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInvitesAcceptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostInvitesAcceptNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
