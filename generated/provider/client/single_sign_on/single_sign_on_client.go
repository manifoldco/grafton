package single_sign_on

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new single sign on API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for single sign on API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetSso singles sign on

The Manifold Dashboard forwards a user to this route during single
sign-on to a resource's dashboard.

A `code` and `resource_id` are sent as query parameters allowing the
provider to request an access token.

The `code` is scoped to the initiating user and resource being accessed
and is only valid for five minutes. It cannot be used more than once.

Once an access token has been acquired for this user's session by
the provider's server, the user should be forwarded to the
resource's dashboard.

The provider should associate the access token with the user for
the duration of their session.

The access token is sensitive data that grants access to a user's
data within Manifold. It should be treated with care.

**IMPORTANT**: A malicious user *could* tamper with the `resource_id`
query parameter. To prevent this, the provider *must* validate that the
user has access to the targeted resource by requesting information
about it from the Connector API using the granted access token.

*/
func (a *Client) GetSso(params *GetSsoParams) (*GetSsoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSsoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSso",
		Method:             "GET",
		PathPattern:        "/sso/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSsoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSsoOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
