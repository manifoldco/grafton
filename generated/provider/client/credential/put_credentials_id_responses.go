package credential

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// PutCredentialsIDReader is a Reader for the PutCredentialsID structure.
type PutCredentialsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutCredentialsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPutCredentialsIDCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewPutCredentialsIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutCredentialsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutCredentialsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutCredentialsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPutCredentialsIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPutCredentialsIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutCredentialsIDCreated creates a PutCredentialsIDCreated with default headers values
func NewPutCredentialsIDCreated() *PutCredentialsIDCreated {
	return &PutCredentialsIDCreated{}
}

/*PutCredentialsIDCreated handles this case with default header values.

Successful credential provisioning request with associated secrets.

*/
type PutCredentialsIDCreated struct {
	Payload PutCredentialsIDCreatedBody
}

func (o *PutCredentialsIDCreated) Error() string {
	return fmt.Sprintf("[PUT /credentials/{id}][%d] putCredentialsIdCreated  %+v", 201, o.Payload)
}

func (o *PutCredentialsIDCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutCredentialsIDAccepted creates a PutCredentialsIDAccepted with default headers values
func NewPutCredentialsIDAccepted() *PutCredentialsIDAccepted {
	return &PutCredentialsIDAccepted{}
}

/*PutCredentialsIDAccepted handles this case with default header values.

Acknowledgement of the provision request with a corresponding
message to be displayed to the user. The provider will call the
callback url once credentials have been provisioned successfully or
a failure has occurred.

*/
type PutCredentialsIDAccepted struct {
	Payload PutCredentialsIDAcceptedBody
}

func (o *PutCredentialsIDAccepted) Error() string {
	return fmt.Sprintf("[PUT /credentials/{id}][%d] putCredentialsIdAccepted  %+v", 202, o.Payload)
}

func (o *PutCredentialsIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutCredentialsIDBadRequest creates a PutCredentialsIDBadRequest with default headers values
func NewPutCredentialsIDBadRequest() *PutCredentialsIDBadRequest {
	return &PutCredentialsIDBadRequest{}
}

/*PutCredentialsIDBadRequest handles this case with default header values.

Request denied due to invalid request body.
*/
type PutCredentialsIDBadRequest struct {
	Payload PutCredentialsIDBadRequestBody
}

func (o *PutCredentialsIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /credentials/{id}][%d] putCredentialsIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutCredentialsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutCredentialsIDUnauthorized creates a PutCredentialsIDUnauthorized with default headers values
func NewPutCredentialsIDUnauthorized() *PutCredentialsIDUnauthorized {
	return &PutCredentialsIDUnauthorized{}
}

/*PutCredentialsIDUnauthorized handles this case with default header values.

Request authenticity could not be validated.
*/
type PutCredentialsIDUnauthorized struct {
	Payload PutCredentialsIDUnauthorizedBody
}

func (o *PutCredentialsIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /credentials/{id}][%d] putCredentialsIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutCredentialsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutCredentialsIDNotFound creates a PutCredentialsIDNotFound with default headers values
func NewPutCredentialsIDNotFound() *PutCredentialsIDNotFound {
	return &PutCredentialsIDNotFound{}
}

/*PutCredentialsIDNotFound handles this case with default header values.

Requested entity could not be found.
*/
type PutCredentialsIDNotFound struct {
	Payload PutCredentialsIDNotFoundBody
}

func (o *PutCredentialsIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /credentials/{id}][%d] putCredentialsIdNotFound  %+v", 404, o.Payload)
}

func (o *PutCredentialsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutCredentialsIDConflict creates a PutCredentialsIDConflict with default headers values
func NewPutCredentialsIDConflict() *PutCredentialsIDConflict {
	return &PutCredentialsIDConflict{}
}

/*PutCredentialsIDConflict handles this case with default header values.

An entity already exists with that identifier and the request contents do
not match the current object. If an entity does exist with that
identifier and the request contents do match then a success response
should be returned.

*/
type PutCredentialsIDConflict struct {
	Payload PutCredentialsIDConflictBody
}

func (o *PutCredentialsIDConflict) Error() string {
	return fmt.Sprintf("[PUT /credentials/{id}][%d] putCredentialsIdConflict  %+v", 409, o.Payload)
}

func (o *PutCredentialsIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutCredentialsIDInternalServerError creates a PutCredentialsIDInternalServerError with default headers values
func NewPutCredentialsIDInternalServerError() *PutCredentialsIDInternalServerError {
	return &PutCredentialsIDInternalServerError{}
}

/*PutCredentialsIDInternalServerError handles this case with default header values.

Request failed due to an internal server error.
*/
type PutCredentialsIDInternalServerError struct {
	Payload PutCredentialsIDInternalServerErrorBody
}

func (o *PutCredentialsIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /credentials/{id}][%d] putCredentialsIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PutCredentialsIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PutCredentialsIDAcceptedBody Object used to display a message back to the user after a change has been
// made to a Resource.
//
swagger:model PutCredentialsIDAcceptedBody
*/
type PutCredentialsIDAcceptedBody struct {

	// message
	// Required: true
	// Max Length: 256
	// Min Length: 3
	Message *string `json:"message"`
}

// Validate validates this put credentials ID accepted body
func (o *PutCredentialsIDAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutCredentialsIDAcceptedBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putCredentialsIdAccepted"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if err := validate.MinLength("putCredentialsIdAccepted"+"."+"message", "body", string(*o.Message), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("putCredentialsIdAccepted"+"."+"message", "body", string(*o.Message), 256); err != nil {
		return err
	}

	return nil
}

/*PutCredentialsIDBadRequestBody put credentials ID bad request body
swagger:model PutCredentialsIDBadRequestBody
*/
type PutCredentialsIDBadRequestBody struct {

	// message
	// Required: true
	// Max Length: 256
	// Min Length: 3
	Message *string `json:"message"`
}

// Validate validates this put credentials ID bad request body
func (o *PutCredentialsIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutCredentialsIDBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putCredentialsIdBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if err := validate.MinLength("putCredentialsIdBadRequest"+"."+"message", "body", string(*o.Message), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("putCredentialsIdBadRequest"+"."+"message", "body", string(*o.Message), 256); err != nil {
		return err
	}

	return nil
}

/*PutCredentialsIDConflictBody put credentials ID conflict body
swagger:model PutCredentialsIDConflictBody
*/
type PutCredentialsIDConflictBody struct {

	// message
	// Required: true
	// Max Length: 256
	// Min Length: 3
	Message *string `json:"message"`
}

// Validate validates this put credentials ID conflict body
func (o *PutCredentialsIDConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutCredentialsIDConflictBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putCredentialsIdConflict"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if err := validate.MinLength("putCredentialsIdConflict"+"."+"message", "body", string(*o.Message), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("putCredentialsIdConflict"+"."+"message", "body", string(*o.Message), 256); err != nil {
		return err
	}

	return nil
}

/*PutCredentialsIDCreatedBody The response expected back from a Provider to provision a set of
// Credentials for a resource.
//
swagger:model PutCredentialsIDCreatedBody
*/
type PutCredentialsIDCreatedBody struct {

	// All key values must be strings and valid environment variable names.
	//
	// Names must match this expression: `^[A-Z][A-Z0-9_]{0,127}$`
	//
	// Required: true
	Credentials map[string]string `json:"credentials"`

	// message
	// Required: true
	// Max Length: 256
	// Min Length: 3
	Message *string `json:"message"`
}

// Validate validates this put credentials ID created body
func (o *PutCredentialsIDCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCredentials(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutCredentialsIDCreatedBody) validateCredentials(formats strfmt.Registry) error {

	if swag.IsZero(o.Credentials) { // not required
		return nil
	}

	return nil
}

func (o *PutCredentialsIDCreatedBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putCredentialsIdCreated"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if err := validate.MinLength("putCredentialsIdCreated"+"."+"message", "body", string(*o.Message), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("putCredentialsIdCreated"+"."+"message", "body", string(*o.Message), 256); err != nil {
		return err
	}

	return nil
}

/*PutCredentialsIDInternalServerErrorBody put credentials ID internal server error body
swagger:model PutCredentialsIDInternalServerErrorBody
*/
type PutCredentialsIDInternalServerErrorBody struct {

	// message
	// Required: true
	// Max Length: 256
	// Min Length: 3
	Message *string `json:"message"`
}

// Validate validates this put credentials ID internal server error body
func (o *PutCredentialsIDInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutCredentialsIDInternalServerErrorBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putCredentialsIdInternalServerError"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if err := validate.MinLength("putCredentialsIdInternalServerError"+"."+"message", "body", string(*o.Message), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("putCredentialsIdInternalServerError"+"."+"message", "body", string(*o.Message), 256); err != nil {
		return err
	}

	return nil
}

/*PutCredentialsIDNotFoundBody put credentials ID not found body
swagger:model PutCredentialsIDNotFoundBody
*/
type PutCredentialsIDNotFoundBody struct {

	// message
	// Required: true
	// Max Length: 256
	// Min Length: 3
	Message *string `json:"message"`
}

// Validate validates this put credentials ID not found body
func (o *PutCredentialsIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutCredentialsIDNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putCredentialsIdNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if err := validate.MinLength("putCredentialsIdNotFound"+"."+"message", "body", string(*o.Message), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("putCredentialsIdNotFound"+"."+"message", "body", string(*o.Message), 256); err != nil {
		return err
	}

	return nil
}

/*PutCredentialsIDUnauthorizedBody put credentials ID unauthorized body
swagger:model PutCredentialsIDUnauthorizedBody
*/
type PutCredentialsIDUnauthorizedBody struct {

	// message
	// Required: true
	// Max Length: 256
	// Min Length: 3
	Message *string `json:"message"`
}

// Validate validates this put credentials ID unauthorized body
func (o *PutCredentialsIDUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutCredentialsIDUnauthorizedBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putCredentialsIdUnauthorized"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if err := validate.MinLength("putCredentialsIdUnauthorized"+"."+"message", "body", string(*o.Message), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("putCredentialsIdUnauthorized"+"."+"message", "body", string(*o.Message), 256); err != nil {
		return err
	}

	return nil
}
