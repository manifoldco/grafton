package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	manifold "github.com/manifoldco/go-manifold"
)

// ResourceMeasures Object describing a resource's feature usage for a billing period.
//
// swagger:model ResourceMeasures
type ResourceMeasures struct {

	// measures
	// Required: true
	Measures map[string]int64 `json:"measures"`

	// period end
	// Required: true
	PeriodEnd *strfmt.DateTime `json:"period_end"`

	// period start
	// Required: true
	PeriodStart *strfmt.DateTime `json:"period_start"`

	// resource id
	// Required: true
	ResourceID manifold.ID `json:"resource_id"`
}

// Validate validates this resource measures
func (m *ResourceMeasures) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMeasures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeriodEnd(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeriodStart(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceMeasures) validateMeasures(formats strfmt.Registry) error {

	if swag.IsZero(m.Measures) { // not required
		return nil
	}

	return nil
}

func (m *ResourceMeasures) validatePeriodEnd(formats strfmt.Registry) error {

	if err := validate.Required("period_end", "body", m.PeriodEnd); err != nil {
		return err
	}

	return nil
}

func (m *ResourceMeasures) validatePeriodStart(formats strfmt.Registry) error {

	if err := validate.Required("period_start", "body", m.PeriodStart); err != nil {
		return err
	}

	return nil
}

func (m *ResourceMeasures) validateResourceID(formats strfmt.Registry) error {

	if err := m.ResourceID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resource_id")
		}
		return err
	}

	return nil
}
