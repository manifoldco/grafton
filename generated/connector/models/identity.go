package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// Identity The underlying actor represented by the current Access Token.
// swagger:discriminator Identity type
type Identity interface {
	runtime.Validatable

	// type
	// Required: true
	Type() string
	SetType(string)
}

// UnmarshalIdentitySlice unmarshals polymorphic slices of Identity
func UnmarshalIdentitySlice(reader io.Reader, consumer runtime.Consumer) ([]Identity, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Identity
	for _, element := range elements {
		obj, err := unmarshalIdentity(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalIdentity unmarshals polymorphic Identity
func UnmarshalIdentity(reader io.Reader, consumer runtime.Consumer) (Identity, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalIdentity(data, consumer)
}

func unmarshalIdentity(data []byte, consumer runtime.Consumer) (Identity, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "product":
		var result Product
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "user":
		var result User
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)

}
