package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	manifold "github.com/manifoldco/go-manifold"
)

// OAuthCredentialGetResponse o auth credential get response
// swagger:model OAuthCredentialGetResponse
type OAuthCredentialGetResponse struct {

	// created at
	// Required: true
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// expires at
	ExpiresAt strfmt.DateTime `json:"expires_at,omitempty"`

	// id
	// Required: true
	ID manifold.ID `json:"id"`

	// updated at
	// Required: true
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	OAuthCredentialCreateRequest
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OAuthCredentialGetResponse) UnmarshalJSON(raw []byte) error {

	var data struct {
		CreatedAt *strfmt.DateTime `json:"created_at"`

		ExpiresAt strfmt.DateTime `json:"expires_at,omitempty"`

		ID manifold.ID `json:"id"`

		UpdatedAt *strfmt.DateTime `json:"updated_at"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.CreatedAt = data.CreatedAt

	m.ExpiresAt = data.ExpiresAt

	m.ID = data.ID

	m.UpdatedAt = data.UpdatedAt

	var aO1 OAuthCredentialCreateRequest
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.OAuthCredentialCreateRequest = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OAuthCredentialGetResponse) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	var data struct {
		CreatedAt *strfmt.DateTime `json:"created_at"`

		ExpiresAt strfmt.DateTime `json:"expires_at,omitempty"`

		ID manifold.ID `json:"id"`

		UpdatedAt *strfmt.DateTime `json:"updated_at"`
	}

	data.CreatedAt = m.CreatedAt

	data.ExpiresAt = m.ExpiresAt

	data.ID = m.ID

	data.UpdatedAt = m.UpdatedAt

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	aO1, err := swag.WriteJSON(m.OAuthCredentialCreateRequest)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this o auth credential get response
func (m *OAuthCredentialGetResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.OAuthCredentialCreateRequest.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OAuthCredentialGetResponse) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *OAuthCredentialGetResponse) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *OAuthCredentialGetResponse) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}
