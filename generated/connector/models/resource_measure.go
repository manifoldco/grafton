package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	manifold "github.com/manifoldco/go-manifold"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceMeasure resource measure
// swagger:model ResourceMeasure
type ResourceMeasure struct {

	// feature
	// Required: true
	Feature *ResourceMeasureFeature `json:"feature"`

	// feature value
	// Required: true
	FeatureValue *ResourceMeasureFeatureValue `json:"feature_value"`

	// max
	Max *int64 `json:"max,omitempty"`

	// suffix
	Suffix *string `json:"suffix,omitempty"`

	// usage
	// Required: true
	Usage int64 `json:"usage"`
}

// Validate validates this resource measure
func (m *ResourceMeasure) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeature(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFeatureValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceMeasure) validateFeature(formats strfmt.Registry) error {

	if err := validate.Required("feature", "body", m.Feature); err != nil {
		return err
	}

	if m.Feature != nil {

		if err := m.Feature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("feature")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceMeasure) validateFeatureValue(formats strfmt.Registry) error {

	if err := validate.Required("feature_value", "body", m.FeatureValue); err != nil {
		return err
	}

	if m.FeatureValue != nil {

		if err := m.FeatureValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("feature_value")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceMeasure) validateUsage(formats strfmt.Registry) error {

	if err := validate.Required("usage", "body", int64(m.Usage)); err != nil {
		return err
	}

	return nil
}

// ResourceMeasureFeature resource measure feature
// swagger:model ResourceMeasureFeature
type ResourceMeasureFeature struct {

	// label
	Label manifold.Label `json:"label,omitempty"`

	// name
	Name manifold.Name `json:"name,omitempty"`
}

// Validate validates this resource measure feature
func (m *ResourceMeasureFeature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceMeasureFeature) validateLabel(formats strfmt.Registry) error {

	if swag.IsZero(m.Label) { // not required
		return nil
	}

	if err := m.Label.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("feature" + "." + "label")
		}
		return err
	}

	return nil
}

func (m *ResourceMeasureFeature) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("feature" + "." + "name")
		}
		return err
	}

	return nil
}

// ResourceMeasureFeatureValue resource measure feature value
// swagger:model ResourceMeasureFeatureValue
type ResourceMeasureFeatureValue struct {

	// A machine readable unique label, which is url safe.
	// Pattern: ^[a-z0-9][a-z0-9-_\.]{1,128}$
	Label string `json:"label,omitempty"`

	// name
	Name manifold.Name `json:"name,omitempty"`
}

// Validate validates this resource measure feature value
func (m *ResourceMeasureFeatureValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceMeasureFeatureValue) validateLabel(formats strfmt.Registry) error {

	if swag.IsZero(m.Label) { // not required
		return nil
	}

	if err := validate.Pattern("feature_value"+"."+"label", "body", string(m.Label), `^[a-z0-9][a-z0-9-_\.]{1,128}$`); err != nil {
		return err
	}

	return nil
}

func (m *ResourceMeasureFeatureValue) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("feature_value" + "." + "name")
		}
		return err
	}

	return nil
}
