package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	manifold "github.com/manifoldco/go-manifold"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// User user
// swagger:model user
type User struct {

	// target
	// Required: true
	Target *UserAO1Target `json:"target"`
}

func (m *User) Type() string {
	return "user"
}
func (m *User) SetType(val string) {

}

// UnmarshalJSON unmarshals this polymorphic type from a JSON structure
func (m *User) UnmarshalJSON(raw []byte) error {
	var data struct {
		Type string `json:"type"`

		// target
		// Required: true
		Target *UserAO1Target `json:"target"`
	}

	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	m.Target = data.Target

	return nil
}

// MarshalJSON marshals this polymorphic type to a JSON structure
func (m User) MarshalJSON() ([]byte, error) {
	var data struct {
		Type string `json:"type"`

		// target
		// Required: true
		Target *UserAO1Target `json:"target"`
	}

	data.Target = m.Target
	data.Type = "user"
	return json.Marshal(data)
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	if m.Target != nil {

		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// UserAO1Target user a o1 target
// swagger:model UserAO1Target
type UserAO1Target struct {

	// email
	// Required: true
	Email manifold.Email `json:"email"`

	// name
	// Required: true
	Name manifold.Name `json:"name"`
}

// Validate validates this user a o1 target
func (m *UserAO1Target) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserAO1Target) validateEmail(formats strfmt.Registry) error {

	if err := m.Email.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("target" + "." + "email")
		}
		return err
	}

	return nil
}

func (m *UserAO1Target) validateName(formats strfmt.Registry) error {

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("target" + "." + "name")
		}
		return err
	}

	return nil
}
