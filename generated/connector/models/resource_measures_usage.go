package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ResourceMeasuresUsage resource measures usage
// swagger:model ResourceMeasuresUsage
type ResourceMeasuresUsage struct {

	// measures
	Measures []*ResourceMeasure `json:"measures"`

	// period end
	PeriodEnd strfmt.DateTime `json:"period_end,omitempty"`

	// period start
	PeriodStart strfmt.DateTime `json:"period_start,omitempty"`

	// updated at
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this resource measures usage
func (m *ResourceMeasuresUsage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMeasures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceMeasuresUsage) validateMeasures(formats strfmt.Registry) error {

	if swag.IsZero(m.Measures) { // not required
		return nil
	}

	for i := 0; i < len(m.Measures); i++ {

		if swag.IsZero(m.Measures[i]) { // not required
			continue
		}

		if m.Measures[i] != nil {

			if err := m.Measures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("measures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
