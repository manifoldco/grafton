package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"

	manifold "github.com/manifoldco/go-manifold"
)

// CredentialRotationRequest The information on the credential rotation to perform.
//
// swagger:model CredentialRotationRequest
type CredentialRotationRequest struct {

	// credential id
	// Required: true
	CredentialID manifold.ID `json:"credential_id"`

	// reason
	// Required: true
	// Max Length: 256
	// Min Length: 3
	Reason *string `json:"reason"`

	// resource id
	// Required: true
	ResourceID manifold.ID `json:"resource_id"`
}

// Validate validates this credential rotation request
func (m *CredentialRotationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentialID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialRotationRequest) validateCredentialID(formats strfmt.Registry) error {

	if err := m.CredentialID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("credential_id")
		}
		return err
	}

	return nil
}

func (m *CredentialRotationRequest) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	if err := validate.MinLength("reason", "body", string(*m.Reason), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("reason", "body", string(*m.Reason), 256); err != nil {
		return err
	}

	return nil
}

func (m *CredentialRotationRequest) validateResourceID(formats strfmt.Registry) error {

	if err := m.ResourceID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resource_id")
		}
		return err
	}

	return nil
}
