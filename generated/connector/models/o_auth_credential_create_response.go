package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OAuthCredentialCreateResponse o auth credential create response
// swagger:model OAuthCredentialCreateResponse
type OAuthCredentialCreateResponse struct {

	// secret
	// Required: true
	Secret OAuthClientSecret `json:"secret"`

	OAuthCredentialGetResponse
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OAuthCredentialCreateResponse) UnmarshalJSON(raw []byte) error {

	var data struct {
		Secret OAuthClientSecret `json:"secret"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.Secret = data.Secret

	var aO1 OAuthCredentialGetResponse
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.OAuthCredentialGetResponse = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OAuthCredentialCreateResponse) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	var data struct {
		Secret OAuthClientSecret `json:"secret"`
	}

	data.Secret = m.Secret

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	aO1, err := swag.WriteJSON(m.OAuthCredentialGetResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this o auth credential create response
func (m *OAuthCredentialCreateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.OAuthCredentialGetResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OAuthCredentialCreateResponse) validateSecret(formats strfmt.Registry) error {

	if err := m.Secret.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secret")
		}
		return err
	}

	return nil
}
