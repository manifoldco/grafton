package credential_rotation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new credential rotation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for credential rotation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PutCredentialRotationsRotationID as l p h a start a credential rotation

**ALPHA** A provider can call this endpoint to trigger a credential rotation for
a specific credential. This route supports being called multiple times
with the same payload.

In the case of network or other unexpected errors (such as a `500 Internal
Server Error`), the provider may issue a request more than once with the same
payload and `rotation_id` to be guaranteed that the operation will run exactly once.

**Building a `rotation_id`**

Different rotations must have a different `rotation_id`. A good way to achieve
uniqueness would be to make these ids a uuid (Universally unique identifier).
Also make sure to reuse the `rotation_id` when retrying the same rotation to not
trigger duplicate rotations.

*/
func (a *Client) PutCredentialRotationsRotationID(params *PutCredentialRotationsRotationIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutCredentialRotationsRotationIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCredentialRotationsRotationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCredentialRotationsRotationID",
		Method:             "PUT",
		PathPattern:        "/credential-rotations/{rotation_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCredentialRotationsRotationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCredentialRotationsRotationIDAccepted), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
