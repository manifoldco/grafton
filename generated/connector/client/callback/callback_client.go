package callback

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new callback API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for callback API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PutCallbacksID completes request

A provider can call this endpoint to complete a request that had been
acknowledged but not completed during the initial request as a part of a
provision, plan change, or deprovision flow of a resource or
credential.

In the event that the Connector API can't be reached *or* an unexpected
response (e.g. `500 Internal Server Error`) is returned, the provider
should attempt to invoke the callback in the future to the best of
their abilities.

The behaviour of this route matches the "Repeatable Actions"
specification of the API implemented by providers.  If the callback has
already been received with the payload matching the previous request a
`204 No Content` response will be returned. However, if the payloads do
not match the route will return a `409 Conflict` error response.

If the provider is responding to a request to provision credentials,
then a hash of credentials must be provided. Otherwise, the credentials
property must not be provided.

In the case of a credential provisioning callback, multiple key-value
pairs that represent this set of Credentials. However, if a url form
exists (e.g. `postgres://user:pw@host:5432/db`), please provide the
credentials in that form.

*/
func (a *Client) PutCallbacksID(params *PutCallbacksIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutCallbacksIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCallbacksIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCallbacksID",
		Method:             "PUT",
		PathPattern:        "/callbacks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCallbacksIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCallbacksIDNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
