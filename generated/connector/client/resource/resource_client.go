package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new resource API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resource API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetResourcesID retrieves a resource

A provider can call this endpoint to return information about a
specific resource.

The `product` and `plan` are the machine readable labels which map to
Product and Plan data inside the Manifold Catalog. The `product` is
globally unique while the `plan` is unique to the `product`.

The `region` is the machine readable representation of the platform and
location in which this resource has been provisioned.

*/
func (a *Client) GetResourcesID(params *GetResourcesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourcesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetResourcesID",
		Method:             "GET",
		PathPattern:        "/resources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourcesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResourcesIDOK), nil

}

/*
GetResourcesIDCredentials lists credentials from resource

A provider can call this endpoint to return a list of all the credentials
related to a specific resource

*/
func (a *Client) GetResourcesIDCredentials(params *GetResourcesIDCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourcesIDCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesIDCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetResourcesIDCredentials",
		Method:             "GET",
		PathPattern:        "/resources/{id}/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourcesIDCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResourcesIDCredentialsOK), nil

}

/*
GetResourcesIDMeasures retrieves measures

A provider can call this endpoint to see how much Manifold has stored
for feature usage of a resource. This is useful for testing and validation.

*/
func (a *Client) GetResourcesIDMeasures(params *GetResourcesIDMeasuresParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourcesIDMeasuresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesIDMeasuresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetResourcesIDMeasures",
		Method:             "GET",
		PathPattern:        "/resources/{id}/measures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourcesIDMeasuresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResourcesIDMeasuresOK), nil

}

/*
GetResourcesIDUsers lists all users

A provider can call this endpoint to return a list of all users who
have access to a specific resource.

None of this data should be stored as it's non-unique and will change.
Instead, a provider is required to call this end-point to fetch the
latest data.

*/
func (a *Client) GetResourcesIDUsers(params *GetResourcesIDUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourcesIDUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesIDUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetResourcesIDUsers",
		Method:             "GET",
		PathPattern:        "/resources/{id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourcesIDUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResourcesIDUsersOK), nil

}

/*
PutResourcesIDMeasures bs e t a set how much a resource has used of its features

**BETA** A provider can call this endpoint to set how much a resource
has used of its features during a period of time.

*/
func (a *Client) PutResourcesIDMeasures(params *PutResourcesIDMeasuresParams, authInfo runtime.ClientAuthInfoWriter) (*PutResourcesIDMeasuresNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutResourcesIDMeasuresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutResourcesIDMeasures",
		Method:             "PUT",
		PathPattern:        "/resources/{id}/measures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutResourcesIDMeasuresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutResourcesIDMeasuresNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
