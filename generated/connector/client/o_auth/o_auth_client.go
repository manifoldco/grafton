package o_auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new o auth API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for o auth API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCredentials gets list of o auth credentials without secrets

List all non-expired OAuth 2.0 credential pair for a provider's product.
This does **not** return the secret.

*/
func (a *Client) GetCredentials(params *GetCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCredentials",
		Method:             "GET",
		PathPattern:        "/credentials/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCredentialsOK), nil

}

/*
GetSelf currents identity

A provider can call this endpoint to return the identity represented by
the access token.

Depending on the grant type used to create an access token the
underlying identity will be different.

| Grant Type | Identity Type |
| ---------- | ------------ |
| `authorization_code` | `user` |
| `client_credentials` | `product` |

*/
func (a *Client) GetSelf(params *GetSelfParams, authInfo runtime.ClientAuthInfoWriter) (*GetSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSelfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSelf",
		Method:             "GET",
		PathPattern:        "/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSelfOK), nil

}

/*
PostCredentials creates an o auth credential pair

Create an OAuth 2.0 credential pair for a provider's product.
`client_secret` is stored as an `scrypt` hash only; if the value is
lost after creation, it cannot be recovered.

*/
func (a *Client) PostCredentials(params *PostCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*PostCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCredentials",
		Method:             "POST",
		PathPattern:        "/credentials/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCredentialsOK), nil

}

/*
PostOauthTokens creates access token

A provider uses this endpoint to acquire a scoped access token which
grants them authority to act on behalf of the grantor (either a
provider or user).

There are two grant types used for requesting an access token:

* `authorization_code` which allows a provider to exchange a `code`
  grant from a user for an access token giving them permission to act on
  the user's behalf.
* `client_credentials` which allows a provider to grant themselves an
  access token scoped to a product.

This endpoint is a part of the Single Sign-On flow invoked by users
attempting to navigate to a resource's dashboard. A `code` is only
valid for five minutes and cannot be used more than once to grant an
access token.

Provider authentication is supported with `client_id` and
`client_secret` in either the request body, or via basic authentication.
Basic authentication is the preferred method, but is not required.

The granted token will expire within 24hours.

*/
func (a *Client) PostOauthTokens(params *PostOauthTokensParams) (*PostOauthTokensCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOauthTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOauthTokens",
		Method:             "POST",
		PathPattern:        "/oauth/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOauthTokensReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOauthTokensCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
