package o_auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new o auth API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for o auth API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostCredentials creates an o auth credential pair

Create an OAuth 2.0 credential pair for a provider's product.
`client_secret` is stored as an `scrypt` hash only; if the value is
lost after creation, it cannot be recovered.

*/
func (a *Client) PostCredentials(params *PostCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*PostCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCredentials",
		Method:             "POST",
		PathPattern:        "/credentials/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCredentialsOK), nil

}

/*
PostSso creates authorization code

Endpoint for creating an authorization code used by the user to issue
an SSO request against a providers API from the Dashboard.

*/
func (a *Client) PostSso(params *PostSsoParams, authInfo runtime.ClientAuthInfoWriter) (*PostSsoCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSsoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSso",
		Method:             "POST",
		PathPattern:        "/sso",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSsoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSsoCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
